{"version":3,"sources":["images/placeholder.png","images/zeroLogo.PNG","comp/NavBar/NavBar.js","comp/EpisodeArray/dataSample.js","comp/EpisodeArray/EpisodeCard/EpisodeCard.js","comp/EpisodeArray/EpisodeArray.js","comp/Main/Main.js","comp/About/About.js","comp/GradientBlock/GradientBlock.js","comp/EpisodePage/EpisodePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","src","zeroLogo","alt","to","React","Component","globalInfo","title","text","YTLink","YTThumbNail","placeholder","Spotify","AppleMusic","EpisodeCard","window","scrollTo","input","entry","this","props","key","onClick","scrollUp","index","length","substring","EpisodeArray","cards","dataSample","map","Main","About","GradientBlock","EpisodePage","episodeId","match","params","url","height","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,8UCsB5BC,E,uKAbP,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAUC,IAAI,OAAOH,UAAU,aACzC,wBAAIA,UAAU,UACV,4BAAI,kBAAC,IAAD,CAAMI,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,gB,GARHC,IAAMC,W,iBCHZ,GACXC,WAAY,CACZ,CACIC,MAAO,8BACPC,KAAK,0LACLC,OAAQ,8CACRC,YAAaC,IACbC,QAAS,GACTC,WAAY,IAEhB,CACIN,MAAO,iDACPC,KAAK,wMACLC,OAAQ,8CACRC,YAAaC,IACbC,QAAS,GACTC,WAAY,IAEhB,CACIN,MAAO,kDACPC,KAAK,6SAGLC,OAAQ,8NACRC,YAAaC,IACbC,QAAS,GACTC,WAAY,IAEhB,CACIN,MAAO,+CACPC,KAAK,kMACLC,OAAQ,8NACRC,YAAaC,IACbC,QAAS,GACTC,WAAY,MCDLC,G,+KA5BPC,OAAOC,SAAS,EAAG,K,+BAGnB,IACkBC,EADZC,EAAQC,KAAKC,MAAMF,MAQzB,OACI,wBAAKG,IAAKH,EAAMT,OAAQa,QAASH,KAAKI,UACtC,kBAAC,IAAD,CAAMpB,GAAI,YAAYgB,KAAKC,MAAMI,MAAOzB,UAAU,QAElD,yBAAKC,IAAKW,IAAaT,IAAI,cAAcH,UAAU,cACnD,yBAAKA,UAAU,WACf,wBAAIA,UAAU,aAAamB,EAAMX,OACjC,uBAAGR,UAAU,aAdCkB,EAcoBC,EAAMV,MAb9BiB,OAAS,GACTR,EAAMS,UAAU,EAAG,KAAO,MAE7BT,IAYP,yBAAKlB,UAAU,YAAW,gD,GAtBZK,IAAMC,YCajBsB,G,6KAZP,IAAMC,EAAQC,EAAWvB,WAAWwB,KAAI,SAACZ,EAAOM,GAAR,OAAkB,kBAAC,EAAD,CAAaN,MAAOA,EAAOM,MAAOA,OAE5F,OACI,6BAASzB,UAAU,gBACnB,wBAAIA,UAAU,SACT6B,Q,GAPUxB,IAAMC,YCgBlB0B,E,uKAdP,OACI,yBAAKhC,UAAU,YACX,gCACI,kBAAC,EAAD,MACA,oEACA,4BAAQA,UAAU,cAAlB,+BAEJ,yBAAKA,UAAU,aACX,kBAAC,EAAD,W,GAVDK,IAAMC,WCUV2B,E,uKAVP,OACI,gCACQ,kBAAC,EAAD,MACA,0C,GALA5B,IAAMC,W,iBCGT4B,MAJjB,SAAuBb,GACrB,OAAQ,yBAAKrB,UAAU,cC4BVmC,G,6KApBX,IACIC,EADOhB,KAAKC,MACKgB,MAAMC,OAAOF,UAC9BjB,EAAQW,EAAWvB,WAAW6B,GAClC,OACI,6BACA,kBAAC,EAAD,MACA,4BAAKjB,EAAMX,OACX,yBAAKR,UAAU,iBACf,kBAAC,IAAD,CAAauC,IAAKpB,EAAMT,OAAQ8B,OAAO,UAGvC,uBAAGxC,UAAU,iBAAiBmB,EAAMV,MACpC,kBAAC,EAAD,MACA,8CACA,kBAAC,EAAD,W,GAjBkBJ,IAAMC,Y,aCajBmC,MAdf,WACE,OACE,yBAAKzC,UAAU,OACf,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWX,IAChC,kBAAC,IAAD,CAAOU,KAAK,sBAAsBC,UAAWT,IAE7C,kBAAC,IAAD,CAAOS,UAAWZ,OCHFa,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASV,MACvB,2DCXNW,IAASC,OAEL,kBAAC,IAAD,KACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b78f619.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.eac4b3db.png\";","module.exports = __webpack_public_path__ + \"static/media/zeroLogo.9ce190a0.PNG\";","import React from 'react'\nimport \"./NavBar.css\"\nimport { Link } from 'react-router-dom'\n  \nimport zeroLogo from '../../images/zeroLogo.PNG'\n\nclass NavBar extends React.Component {\n    render (){\n        \n        return (\n            <div className=\"NavBar\">\n                <img src={zeroLogo} alt=\"Logo\" className=\"zeroLogo\"></img>\n                <ul className=\"NavBar\">\n                    <li><Link to='/'>Home</Link></li>\n                    <li><Link to='/about'>About</Link></li>\n                    \n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default NavBar","//data will have to be delivered via CMS. Can I grab a thumbnail from yt?\nimport placeholder from '../../images/placeholder.png'\n\nexport default {\n    globalInfo: [\n    {\n        title: 'Season 1 - Mid Season Recap',\n        text: `This video is a mid season recap of the first 5 organizations interviewed. For more information on these organizations, see the previous videos or get connected using the links below!`,\n        YTLink: 'https://www.youtube.com/watch?v=us43L_WULMw',\n        YTThumbNail: placeholder,\n        Spotify: '',\n        AppleMusic: '',\n    },\n    {\n        title: 'S1E7: One Health Englewood with Rodney Johnson',\n        text: `Rodney Johnson, President of One Health Englewood share his story and plans to advance the public health relations of Greater Englewood through advocacy, health literacy, and community development.`,\n        YTLink: 'https://www.youtube.com/watch?v=SP3VE-EGhsA',\n        YTThumbNail: placeholder,\n        Spotify: '',\n        AppleMusic: '',\n    },\n    {\n        title: 'S1E6: Kingdom Avenue Inc. with Danielle Wallace',\n        text: `Danielle Wallace, Founder & Executive Director of Kingdom Avenue Inc. share her story and how she is connecting community resources to serve youth.\n        \n        Kingdom Avenue Inc.'s mission is to transform communities one generation at a time through education, inspiration, and unification.`,\n        YTLink: '<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Zefhnsmc6dE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>',\n        YTThumbNail: placeholder,\n        Spotify: '',\n        AppleMusic: '',\n    },\n    {\n        title: 'S1E8: Folded Map Project with Tonika Johnson',\n        text: `Tonika Johnson, Creator, Social Justice Artist, and Photographer  on how she uses her Folded Map Project to investigate what urban segregation looks like and how it impacts Chicago residents.`,\n        YTLink: '<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Du9toxM0pWE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>',\n        YTThumbNail: placeholder,\n        Spotify: '',\n        AppleMusic: '',\n    },\n    ]\n}","import React from 'react'\nimport './EpisodeCard.css'\n\nimport { Link } from 'react-router-dom'\nimport placeholder from '../../../images/placeholder.png'\n\nclass EpisodeCard extends React.Component {\n    scrollUp() {\n        window.scrollTo(0, 0)\n      }\n    render(){\n        const entry = this.props.entry;\n        function truncate(input) {\n            if (input.length > 70) {\n               return input.substring(0, 200) + '...';\n            }\n            return input;\n         };\n         //onClick={() => { history.push('/new-route') }}\n        return(\n            <li  key={entry.YTLink} onClick={this.scrollUp}>\n            <Link to={'/episode/'+this.props.index} className='card'>\n            \n            <img src={placeholder} alt=\"placeholder\" className=\"cardImage\"/>\n            <div className=\"cardDiv\">\n            <h3 className=\"cardTitle\">{entry.title}</h3>\n            <p className=\"cardText\">{truncate(entry.text)}</p>\n            </div>\n            <div className=\"cardDate\"><p >10/25/2020</p></div>\n            \n            </Link>\n        </li>\n        )\n    }\n}\n\nexport default EpisodeCard","import React from 'react'\nimport dataSample from './dataSample'\nimport EpisodeCard from './EpisodeCard/EpisodeCard'\nimport './EpisodeArray.css'\n\nclass EpisodeArray extends React.Component {\n    render(){\n        const cards = dataSample.globalInfo.map((entry, index) => <EpisodeCard entry={entry} index={index}/>)\n        \n        return(\n            <section className=\"arraySection\">\n            <ul className=\"cards\">\n                {cards}\n            </ul>\n            </section>\n        )\n    }\n}\n\nexport default EpisodeArray","import React from 'react'\nimport './Main.css'\nimport NavBar from '../NavBar/NavBar'\nimport EpisodeArray from '../EpisodeArray/EpisodeArray'\n//import placeholder from '../../images/placeholder.png'\nclass Main extends React.Component {\n    render (){\n        return (\n            <div className=\"MainComp\">\n                <header>\n                    <NavBar />\n                    <h1>Showcasing non-profit organizations.</h1>\n                    <button className=\"buttonMain\">Sign up for our newsletter</button>\n                </header>\n                <div className=\"gradient\"/>\n                    <EpisodeArray />\n            </div>\n        )\n    }\n}\n\nexport default Main","import React from 'react';\nimport NavBar from '../NavBar/NavBar'\n\nclass About extends React.Component {\n    render(){\n        return (\n            <header>\n                    <NavBar />\n                    <h1>About</h1>\n                </header>\n            \n        )\n    }\n}\n\nexport default About","import React from 'react'\n\nfunction GradientBlock(props) {\n  return (<div className=\"gradient\" />)\n  }\n\n  export default GradientBlock","import React from \"react\"\nimport ReactPlayer from 'react-player/youtube'\nimport NavBar from '../NavBar/NavBar'\nimport EpisodeArray from '../EpisodeArray/EpisodeArray'\nimport dataSample from '../EpisodeArray/dataSample'\nimport GradientBlock from '../GradientBlock/GradientBlock'\nimport './EpisodePage.css'\n\nclass EpisodePage extends React.Component {\n    \nrender(){\n    let info = this.props;\n    let episodeId = info.match.params.episodeId;\n    let entry = dataSample.globalInfo[episodeId]\n    return (\n        <div>\n        <NavBar />\n        <h1>{entry.title}</h1>\n        <div className=\"playerWrapper\">\n        <ReactPlayer url={entry.YTLink} height=\"100%\"/>\n        </div>\n        \n        <p className=\"pageParagraph\">{entry.text}</p>\n        <GradientBlock />\n        <h2>More episodes:</h2>\n        <EpisodeArray />\n        </div>\n    )\n}\n}\n\nexport default EpisodePage","import React from 'react';\nimport Main from './comp/Main/Main'\nimport About from './comp/About/About'\nimport EpisodePage from './comp/EpisodePage/EpisodePage'\nimport { Route, Switch } from 'react-router-dom'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Switch>\n    <Route exact path='/' component={Main} />\n    <Route path='/about' component={About} />\n    <Route path='/episode/:episodeId' component={EpisodePage} />\n    \n    <Route component={Main} />\n    </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  \n    <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}