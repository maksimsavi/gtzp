{"version":3,"sources":["images/placeholder.png","images/zeroLogo.PNG","comp/NavBar/NavBar.js","comp/EpisodeArray/dataSample.js","comp/EpisodeArray/EpisodeCard/EpisodeCard.js","comp/EpisodeArray/EpisodeArray.js","comp/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","src","zeroLogo","alt","icon","size","React","Component","text","globalInfo","title","YTLink","YTThumbNail","placeholder","Spotify","AppleMusic","EpisodeCard","entry","this","props","EpisodeArray","cards","dataSample","map","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,yC,qBCA3CD,EAAOC,QAAU,IAA0B,sC,0SCiB5BC,E,uKATP,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAUC,IAAI,OAAOH,UAAU,aACzC,kBAAC,IAAD,CAAiBI,KAAK,OAAOC,KAAK,Y,GAN7BC,IAAMC,W,gBCHrBC,EAAI,oIAGK,GACXC,WAAY,CACZ,CACIC,MAAO,gBACPF,KAAMA,EACNG,OAAQ,GACRC,YAAaC,IACbC,QAAS,GACTC,WAAY,IAEhB,CACIL,MAAO,gBACPF,KAAMA,EACNG,OAAQ,GACRC,YAAaC,IACbC,QAAS,GACTC,WAAY,IAEhB,CACIL,MAAO,gBACPF,KAAMA,EACNG,OAAQ,GACRC,YAAaC,IACbC,QAAS,GACTC,WAAY,MCZLC,G,6KAXP,IAAMC,EAAQC,KAAKC,MAAMF,MACzB,OACA,wBAAIjB,UAAU,QACV,yBAAKC,IAAKY,IAAaV,IAAKc,EAAMP,QAClC,wBAAIV,UAAU,aAAaiB,EAAMP,OACjC,2BAAIO,EAAMT,W,GAPIF,IAAMC,YCYjBa,G,6KATP,IAAMC,EAAQC,EAAWb,WAAWc,KAAI,SAAAN,GAAK,OAAI,kBAAC,EAAD,CAAaA,MAAOA,OACrE,OACI,wBAAIjB,UAAU,SACTqB,O,GALUf,IAAMC,YCiBlBiB,E,uKAfP,OACI,yBAAKxB,UAAU,YACX,gCACI,kBAAC,EAAD,MACA,oEACA,+DAEJ,iCACI,kBAAC,EAAD,Y,GAVDM,IAAMC,W,MCQVkB,MATf,WACE,OACE,yBAAKzB,UAAU,OAEf,kBAAC,EAAD,QCIgB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8d0dbe3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.eac4b3db.png\";","module.exports = __webpack_public_path__ + \"static/media/zeroLogo.9ce190a0.PNG\";","import React from 'react'\nimport \"./NavBar.css\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport zeroLogo from '../../images/zeroLogo.PNG'\n\nclass NavBar extends React.Component {\n    render (){\n        \n        return (\n            <div className=\"NavBar\">\n                <img src={zeroLogo} alt=\"Logo\" className=\"zeroLogo\"></img>\n                <FontAwesomeIcon icon=\"bars\" size=\"xs\" />\n            </div>\n        )\n    }\n}\n\nexport default NavBar","//data will have to be delivered via CMS. Can I grab a thumbnail from yt?\nimport placeholder from '../../images/placeholder.png'\nconst text = `\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.  \n`;\nexport default {\n    globalInfo: [\n    {\n        title: 'Episode Title',\n        text: text,\n        YTLink: '',\n        YTThumbNail: placeholder,\n        Spotify: '',\n        AppleMusic: '',\n    },\n    {\n        title: 'Episode Title',\n        text: text,\n        YTLink: '',\n        YTThumbNail: placeholder,\n        Spotify: '',\n        AppleMusic: '',\n    },\n    {\n        title: 'Episode Title',\n        text: text,\n        YTLink: '',\n        YTThumbNail: placeholder,\n        Spotify: '',\n        AppleMusic: '',\n    },\n    ]\n}","import React from 'react'\nimport './EpisodeCard.css'\nimport placeholder from '../../../images/placeholder.png'\n\nclass EpisodeCard extends React.Component {\n    render(){\n        const entry = this.props.entry;\n        return(\n        <li className='card'>\n            <img src={placeholder} alt={entry.title}/>\n            <h3 className=\"cardTitle\">{entry.title}</h3>\n            <p>{entry.text}</p>\n        </li>   \n        )\n    }\n}\n\nexport default EpisodeCard","import React from 'react'\nimport dataSample from './dataSample'\nimport EpisodeCard from './EpisodeCard/EpisodeCard'\nimport './EpisodeArray.css'\n\nclass EpisodeArray extends React.Component {\n    render(){\n        const cards = dataSample.globalInfo.map(entry => <EpisodeCard entry={entry}/>)\n        return(\n            <ul className=\"cards\">\n                {cards}\n            </ul>\n        )\n    }\n}\n\nexport default EpisodeArray","import React from 'react'\nimport './Main.css'\nimport NavBar from '../NavBar/NavBar'\nimport EpisodeArray from '../EpisodeArray/EpisodeArray'\n//import placeholder from '../../images/placeholder.png'\nclass Main extends React.Component {\n    render (){\n        return (\n            <div className=\"MainComp\">\n                <header>\n                    <NavBar />\n                    <h1>Showcasing non-profit organizations.</h1>\n                    <button>Sign up for our newsletter</button>\n                </header>\n                <section>\n                    <EpisodeArray />\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default Main","import React from 'react';\nimport Main from './comp/Main/Main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \n    <Main />  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}